#include <cassert>
#include <filesystem>
#include <fstream>
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;
using filesystem::path;

// Суффикс, который определяет программа, должен начинаться со знака подчёркивания. Так можно избежать конфликтов с литералами стандартной библиотеки, которые уже существуют или будут добавлены в будущем.Ещё одно преимущество такой записи — оператор принимает размер литерала, вычисляемый на этапе компиляции. Это даёт небольшой выигрыш в производительности: не нужно проходить второй раз, чтобы определить её длину.
path operator""_p(const char* data, std::size_t sz) {
    return path(data, data + sz);
}

void PrintTree(ostream& dst, const path& p, const filesystem::file_status& status, unsigned int offset) {
    dst << string(offset, ' ') << p.filename().string() << endl;

    if (status.type() == filesystem::file_type::directory) {
        vector<filesystem::directory_entry> directory_entry;
        for (const auto& dir_entry: filesystem::directory_iterator(p)) {
            directory_entry.push_back(dir_entry);
        }
        
        sort(directory_entry.begin(), directory_entry.end(),
             [](const auto& lhs, const auto& rhs) {
                 return lhs.path().filename().string() > rhs.path().filename().string();
             });
        
        for (const auto& directory: directory_entry) {
            PrintTree(dst, directory, directory.status(), offset + 2);
        }
    }
}

void PrintTree(ostream& dst, const path& p) {
    PrintTree(dst, p, status(p), 0);
}

int main() {
    error_code err;
    filesystem::remove_all("test_dir", err);
    filesystem::create_directories("test_dir"_p / "a"_p, err);
    filesystem::create_directories("test_dir"_p / "b"_p, err);

    ofstream("test_dir"_p / "b"_p / "f1.txt"_p);
    ofstream("test_dir"_p / "b"_p / "f2.txt"_p);
    ofstream("test_dir"_p / "a"_p / "f3.txt"_p);

    ostringstream out;
    PrintTree(out, "test_dir"_p);
    assert(out.str() ==
        "test_dir\n"
        "  b\n"
        "    f2.txt\n"
        "    f1.txt\n"
        "  a\n"
        "    f3.txt\n"sv
    );
}
